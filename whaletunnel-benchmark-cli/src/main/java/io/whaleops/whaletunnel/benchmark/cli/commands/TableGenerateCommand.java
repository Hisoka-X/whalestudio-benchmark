package io.whaleops.whaletunnel.benchmark.cli.commands;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;

import io.whaleops.whaletunnel.benchmark.cli.configuration.WhaleTunnelBenchmarkOracleDatabaseConfiguration;
import org.springframework.shell.standard.ShellComponent;
import org.springframework.shell.standard.ShellMethod;
import org.springframework.shell.standard.ShellOption;

import io.whaleops.whaletunnel.benchmark.cli.configuration.WhaleTunnelBenchmarkMysqlDatabaseConfiguration;

/**
 * Use to generate table for benchmark.
 */
@ShellComponent
public class TableGenerateCommand {

    private static final String MYSQL_TEMPLATE = "CREATE TABLE IF NOT EXIST %s ( `id` int(11) NOT NULL AUTO_INCREMENT," +
        " `smallint_col` smallint(6) DEFAULT NULL, `integer_col` int(11) DEFAULT NULL, `bigint_col` bigint(20) DEFAULT NULL," +
        " `decimal_col` decimal(10,2) DEFAULT NULL, `numeric_col` decimal(10,2) DEFAULT NULL, `real_col` float DEFAULT NULL," +
        " `double_col` double DEFAULT NULL, `smallserial_col` smallint(6) DEFAULT NULL, `serial_col` int(11) DEFAULT NULL," +
        " `bigserial_col` bigint(20) DEFAULT NULL, `varchar_col` varchar(50) COLLATE utf8mb4_unicode_ci DEFAULT NULL," +
        " `text_col` text COLLATE utf8mb4_unicode_ci, `date_col` date DEFAULT NULL, `time_col` time DEFAULT NULL," +
        " `timestamp_col` datetime DEFAULT NULL, `boolean_col` tinyint(1) DEFAULT NULL, `bytea_col` longblob," +
        " PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;";

    private static final String ORACLE_TEMPLATE = "CREATE TABLE %s (\n" +
        "  id NUMBER(11) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n" +
        "  smallint_col NUMBER(6),\n" +
        "  integer_col NUMBER(11),\n" +
        "  bigint_col NUMBER(20),\n" +
        "  decimal_col NUMBER(10, 2),\n" +
        "  numeric_col NUMBER(10, 2),\n" +
        "  real_col FLOAT,\n" +
        "  double_col FLOAT,\n" +
        "  smallserial_col NUMBER(6),\n" +
        "  serial_col NUMBER(11),\n" +
        "  bigserial_col NUMBER(20),\n" +
        "  varchar_col VARCHAR2(50),\n" +
        "  text_col CLOB,\n" +
        "  date_col DATE,\n" +
        "  time_col TIMESTAMP,\n" +
        "  timestamp_col TIMESTAMP,\n" +
        "  boolean_col NUMBER(1),\n" +
        "  bytea_col BLOB\n" +
        ")";

    @ShellMethod(key = "table")
    public String tableGenerate(@ShellOption(defaultValue = "ORACLE") String type,
                                String database, @ShellOption(defaultValue = "all_types_table_") String prefix, int number) throws SQLException {

        String url;
        String user;
        String password;
        String template;
        if (type.equalsIgnoreCase("ORACLE")) {
//            WhaleTunnelBenchmarkOracleDatabaseConfiguration instance = WhaleTunnelBenchmarkOracleDatabaseConfiguration.getInstance();
//            url = instance.getJdbcUrl();
//            user = instance.getUserName();
//            password = instance.getPassword();
            template = ORACLE_TEMPLATE;


            url = "jdbc:oracle:thin:@localhost:1522:xe";
            user = "test";
            password = "oracle";
        } else {
            WhaleTunnelBenchmarkMysqlDatabaseConfiguration instance = WhaleTunnelBenchmarkMysqlDatabaseConfiguration.getInstance();
            url = instance.getJdbcUrl();
            user = instance.getUserName();
            password = instance.getPassword();
            template = MYSQL_TEMPLATE;
        }

        try (Connection connection = DriverManager.getConnection(url, user, password)) {
            Statement statement = connection.createStatement();
            for (int i = 1; i <= number; i++) {
                String sql = String.format(template, String.format("TEST."+prefix + "%04d", i));
                statement.executeUpdate(sql);
            }
            return "success with " + number + " tables";
        }
    }

}
